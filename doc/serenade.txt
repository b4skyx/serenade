*serenade.txt*

CONTENTS                                     *serenade-contents*

Introduction                                 |serenade-introduction|
Installation                                 |serenade-installation|
Usage                                        |serenade-usage|
Configuration                                |serenade-configuration|

Note: Type |gO| to show the outline of contents.

==============================================================================
INTRODUCTION                                         *serenade-introduction*

Forest Night is a green based color scheme, it's designed to be warm and soft
in order to protect developers' eyes.

Features~

- Green based but warm-toned.
- Designed to have soft contrast for eye protection.
- Works well with [redshift](https://github.com/jonls/redshift) and [f.lux](https://justgetflux.com).
- Customizable.
- Rich support for common file types and plugins.
- Italic support ðŸŽ‰

==============================================================================
INSTALLATION                                         *serenade-installation*

------------------------------------------------------------------------------

Via Plugin Manager~

    Take [vim-plug](https://github.com/junegunn/vim-plug) for example:
>
        Plug 'b4skyx/serenade'
<
    For better syntax highlighting support, please install
    https://github.com/sheerun/vim-polyglot or https://github.com/nvim-treesitter/nvim-treesitter.

------------------------------------------------------------------------------

Manually~

    1. Clone the repository: `git clone --depth 1 https://github.com/b4skyx/serenade.git`

    2. Copy `/path/to/serenade/autoload/serenade.vim` to
    `~/.vim/autoload/`.

    3. Copy `/path/to/serenade/colors/serenade.vim` to
    `~/.vim/colors/` .

    4. Copy `/path/to/serenade/doc/serenade.txt` to
    `~/.vim/doc/` and execute `:helptags ~/.vim/doc/` to generate help tags.

    5. To install [airline](https://github.com/vim-airline/vim-airline) theme,
    copy `/path/to/serenade/autoload/airline/themes/serenade.vim`
    to `~/.vim/autoload/airline/themes/` .

    6. To install [lightline](https://github.com/itchyny/lightline.vim) theme,
    copy `/path/to/serenade/autoload/lightline/colorscheme/serenade.vim`
    to `~/.vim/autoload/lightline/colorscheme/` .

------------------------------------------------------------------------------

AUR~

    There are some packages available for Arch Linux users in AUR:

    - [vim-serenade-git](https://aur.archlinux.org/pkgbase/vim-serenade-git/)
    - [neovim-serenade-git](https://aur.archlinux.org/pkgbase/neovim-serenade-git/)

==============================================================================
USAGE                                                       *serenade-usage*

------------------------------------------------------------------------------

Vim~

    Put something like this in your vimrc:
>
        " Important!!
        if has('termguicolors')
          set termguicolors
        endif
        " The configuration options should be placed before `colorscheme serenade`.
        let g:serenade_enable_italic = 1
        let g:serenade_disable_italic_comment = 1
        colorscheme serenade
<
    See |serenade-configuration| for more configuration options.

    If you want to apply this color scheme temporarily, run this command in
    vim(this may cause broken colors):
>
        :colorscheme serenade
<
------------------------------------------------------------------------------

Airline~

    To enable [airline](https://github.com/vim-airline/vim-airline) color
    scheme, put this in your vimrc:
>
        let g:airline_theme = 'serenade'
<
    To apply it without reloading:
>
        :AirlineTheme serenade
<
------------------------------------------------------------------------------

Lightline~

    To enable [lightline](https://github.com/itchyny/lightline.vim) color
    scheme, put this in your vimrc:
>
        let g:lightline = {}
        let g:lightline.colorscheme = 'serenade'
        " Or this line:
        let g:lightline = {'colorscheme' : 'serenade'}
<
    To apply it without reloading:
>
        :let g:lightline.colorscheme = 'serenade'
        :call lightline#init()
        :call lightline#colorscheme()
<
==============================================================================
CONFIGURATION                                       *serenade-configuration*

Note: the configuration options should be placed before `colorscheme serenade`

E.g.
>
    if has('termguicolors')
      set termguicolors
    endif
    let g:serenade_enable_italic = 1
    let g:serenade_disable_italic_comment = 1
    colorscheme serenade
    let g:lightline.colorscheme = 'serenade'
<
------------------------------------------------------------------------------
                                                  *g:serenade_enable_italic*
g:serenade_enable_italic~

To enable italic in this color scheme, set this option to `1`.

E.g.
>
    let g:serenade_enable_italic = 1
<
Note: This option is designed to use with fonts that support cursive italics.
See |serenade-faq| for more information.

------------------------------------------------------------------------------
                                         *g:serenade_disable_italic_comment*
g:serenade_disable_italic_comment~

By default, italic is enabled in `Comment`. To disable italic in `Comment`, set
this option to `1`.

E.g.
>
    let g:serenade_disable_italic_comment = 1
<

------------------------------------------------------------------------------
                                                         *g:serenade_cursor*
g:serenade_cursor~

Customize the cursor color, only works in GUI clients.

    Available values: `'auto'`, `'red'`, `'orange'`, `'yellow'`, `'green'`,
    `'aqua'`, `'blue'`, `'purple'`
    Default value: `'auto'`

E.g.
>
    let g:serenade_cursor = 'green'
<
------------------------------------------------------------------------------
                                         *g:serenade_transparent_background*
g:serenade_transparent_background~

To use transparent background, set this option to `1`.

E.g.
>
    let g:serenade_transparent_background = 1
<
------------------------------------------------------------------------------
                                         *g:serenade_sign_column_background*
g:serenade_sign_column_background~

By default, the background color of sign column is different from normal text.
If you want to make it the same as normal text, set this option to `'none'`.

    Available values: `'default'`, `'none'`
    Default value: `'default'`

E.g.
>
    let g:serenade_sign_column_background = 'none'
<
------------------------------------------------------------------------------
                                      *g:serenade_diagnostic_text_highlight*
g:serenade_diagnostic_text_highlight~

Whether to highlight the background of error/warning/info/hint text.

    Available values: `0`, `1`
    Default value: `0`

E.g.
>
    let g:serenade_diagnostic_text_highlight = 1
<
------------------------------------------------------------------------------
                                      *g:serenade_diagnostic_line_highlight*
g:serenade_diagnostic_line_highlight~

Some plugins support highlighting error/warning/info/hint lines, but this
feature is disabled by default in this color scheme. To enable this feature,
set this option to `1`.

E.g.
>
    let g:serenade_diagnostic_line_highlight = 1
<
Currently, the following plugins are supported:

- https://github.com/neoclide/coc.nvim
- https://github.com/ycm-core/YouCompleteMe
- https://github.com/dense-analysis/ale
- https://github.com/vim-syntastic/syntastic

------------------------------------------------------------------------------
                                                   *g:serenade_current_word*
g:serenade_current_word~

Some plugins can highlight the word under current cursor, you can use this
option to control their behavior.

Currently support:

- https://github.com/neoclide/coc-highlight
- https://github.com/dominikduda/vim_current_word
- https://github.com/RRethy/vim-illuminate
- https://github.com/itchyny/vim-cursorword
- https://github.com/prabirshrestha/vim-lsp

    Available values: `'grey background'`, `'bold'`, `'underline'`, `'italic'`
    Default value: `'grey background'` when not in transparent mode, `'bold'`
    when in transparent mode.

E.g.
>
    let g:serenade_current_word = 'bold'
<
------------------------------------------------------------------------------
                                         *g:serenade_lightline_disable_bold*
g:serenade_lightline_disable_bold~

By default, bold is enabled in lightline color scheme. To disable bold in
lightline color scheme, set this option to `1`.

E.g.
>
    let g:serenade_lightline_disable_bold = 1
<
Note: this configuration option doesn't need to be placed before `colorscheme serenade`

------------------------------------------------------------------------------
                                             *g:serenade_better_performance*
g:serenade_better_performance~

The loading time of this color scheme is very long because too many file types
and plugins are optimized. This feature allows you to load part of the code on
demand by placing them in the `after/ftplugin` directory.

Enabling this option will reduce loading time by approximately 50%.

E.g.
>
    let g:serenade_better_performance = 1
<
==============================================================================
vim:tw=78:nosta:noet:ts=8:sts=0:ft=help:et:sw=4:fen:fdm=marker:fmr={{{,}}}:
